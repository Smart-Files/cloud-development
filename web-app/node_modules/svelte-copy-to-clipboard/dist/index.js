(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('svelte/internal')) :
    typeof define === 'function' && define.amd ? define(['svelte/internal'], factory) :
    (global = global || self, global.CopyToClipboard = factory(global['svelte/internal']));
}(this, (function (internal) { 'use strict';

    let current_component;
    function get_current_component() {
        throw new Error(`Function called outside component initialization`);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
        };
    }

    /* src/CopyToClipboard.svelte generated by Svelte v3.21.0 */
    const get_default_slot_changes = dirty => ({});
    const get_default_slot_context = ctx => ({ copy: /*copy*/ ctx[0] });

    function create_fragment(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[4].default;
    	const default_slot = internal.create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], get_default_slot_context);

    	return {
    		c() {
    			if (default_slot) default_slot.c();
    		},
    		m(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 8) {
    					default_slot.p(internal.get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[3], get_default_slot_context), internal.get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, get_default_slot_changes));
    				}
    			}
    		},
    		i(local) {
    			if (current) return;
    			internal.transition_in(default_slot, local);
    			current = true;
    		},
    		o(local) {
    			internal.transition_out(default_slot, local);
    			current = false;
    		},
    		d(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let { text } = $$props;
    	const dispatch = createEventDispatcher();

    	const copy = () => {
    		navigator.clipboard.writeText(text).then(() => dispatch("copy", text), e => dispatch("fail"));
    	};

    	let { $$slots = {}, $$scope } = $$props;

    	$$self.$set = $$props => {
    		if ("text" in $$props) $$invalidate(1, text = $$props.text);
    		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	return [copy, text, dispatch, $$scope, $$slots];
    }

    class CopyToClipboard extends internal.SvelteComponent {
    	constructor(options) {
    		super();
    		internal.init(this, options, instance, create_fragment, internal.safe_not_equal, { text: 1 });
    	}
    }

    return CopyToClipboard;

})));
