import "./chunk-X7HCJ7ZS.js";
import "./chunk-NRUTNXHJ.js";
import {
  SvelteComponentDev,
  createEventDispatcher,
  create_slot,
  dispatch_dev,
  get_all_dirty_from_scope,
  get_slot_changes,
  init,
  safe_not_equal,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-EY2A3J55.js";
import "./chunk-2NWPA7HM.js";
import "./chunk-ZC22LKFR.js";

// node_modules/svelte-copy-to-clipboard/src/CopyToClipboard.svelte
var get_default_slot_changes = (dirty) => ({});
var get_default_slot_context = (ctx) => ({ copy: (
  /*copy*/
  ctx[0]
) });
function create_fragment(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[3].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[2],
    get_default_slot_context
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[2],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[2]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[2],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("CopyToClipboard", slots, ["default"]);
  let { text } = $$props;
  const dispatch = createEventDispatcher();
  const copy = () => {
    navigator.clipboard.writeText(text).then(() => dispatch("copy", text), (e) => dispatch("fail"));
  };
  $$self.$$.on_mount.push(function() {
    if (text === void 0 && !("text" in $$props || $$self.$$.bound[$$self.$$.props["text"]])) {
      console.warn("<CopyToClipboard> was created without expected prop 'text'");
    }
  });
  const writable_props = ["text"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<CopyToClipboard> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("text" in $$props2)
      $$invalidate(1, text = $$props2.text);
    if ("$$scope" in $$props2)
      $$invalidate(2, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    createEventDispatcher,
    text,
    dispatch,
    copy
  });
  $$self.$inject_state = ($$props2) => {
    if ("text" in $$props2)
      $$invalidate(1, text = $$props2.text);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [copy, text, $$scope, slots];
}
var CopyToClipboard = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { text: 1 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "CopyToClipboard",
      options,
      id: create_fragment.name
    });
  }
  get text() {
    throw new Error("<CopyToClipboard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set text(value) {
    throw new Error("<CopyToClipboard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var CopyToClipboard_default = CopyToClipboard;
export {
  CopyToClipboard_default as default
};
//# sourceMappingURL=svelte-copy-to-clipboard.js.map
